/*
 * M√≥dulo de Atividades - RPG Nazuna
 * Gerencia a√ß√µes de coleta de recursos como minera√ß√£o, pesca, ca√ßa, etc.
 * 
 * Criado originalmente por: Hiudy
 * 
 * Manter cr√©ditos ao criar ou modificar!
 */

const { carregarDadosJogador, salvarDadosJogador } = require("./utils");
const { ITENS_LOJA, ITENS_VENDA, DIFICULDADE, MONSTROS } = require("./config"); // MONSTROS pode n√£o ser necess√°rio aqui, mas estava no original
const { adicionarSaldo, removerSaldo, adicionarXP, modificarHP, modificarFadiga, modificarMoral } = require("./player");
const { adicionarItem, removerItem, possuiItem } = require("./inventory");
const { verificarPetFugiu, obterBonusPet } = require("./pets"); // Depend√™ncia futura
// const { atualizarRanking } = require("./ranking"); // Depend√™ncia futura

// Fun√ß√£o gen√©rica para verificar pr√©-requisitos comuns (jogador existe, pet, delay)
async function verificarPreRequisitosAtividade(senderId, nomeAtividade, itemNecessario = null) {
    let dados = await carregarDadosJogador(senderId);
    if (!dados) return { erro: "‚ö†Ô∏è Lenda n√£o encontrada! Use `#registrar [nome]`." };

    // Verifica pet (depend√™ncia futura)
    try {
        const petFugiu = await verificarPetFugiu(dados);
        if (petFugiu) {
            await salvarDadosJogador(senderId, dados);
            return { erro: petFugiu.msg, dados }; // Retorna dados atualizados
        }
    } catch(e) {/* Ignora */} 

    // Verifica item necess√°rio
    if (itemNecessario && !possuiItem(dados, itemNecessario)) {
        const itemInfo = ITENS_LOJA.find(i => i.nome === itemNecessario);
        return { erro: `üõ†Ô∏è Voc√™ precisa de *${itemInfo?.nomeExibicao || itemNecessario}* para esta atividade! Compre no mercado.` };
    }
    
    // Verifica item necess√°rio secund√°rio (ex: muni√ß√£o para ca√ßar)
    if (nomeAtividade === 'cacar' && !possuiItem(dados, 'municao')) {
        return { erro: `üèπ Voc√™ precisa de *Muni√ß√£o* para ca√ßar!` };
    }

    // Verifica delay
    const agora = Date.now();
    const delayAtividade = dados.delay?.[nomeAtividade] || 0;
    if (delayAtividade > agora) {
        const tempoRestante = Math.ceil((delayAtividade - agora) / 1000);
        // Mensagens de delay espec√≠ficas por atividade
        const mensagensDelay = {
            minerar: `‚õèÔ∏è A mina ainda ecoa com seus √∫ltimos golpes! Espere ${tempoRestante} segundos.`,
            pescar: `üåä As √°guas precisam de calma... e voc√™ tamb√©m! Espere ${tempoRestante} segundos.`,
            cacar: `ü¶å As presas est√£o ariscas. Deixe a floresta descansar por ${tempoRestante} segundos.`,
            plantar: `üåæ A terra precisa absorver os nutrientes. Volte em ${tempoRestante} segundos.`,
            cortar: `üå≤ A floresta sussurra para esperar... Volte em ${tempoRestante} segundos.`
        };
        return { erro: mensagensDelay[nomeAtividade] || `‚è≥ A√ß√£o em cooldown! Espere ${tempoRestante} segundos.` };
    }

    return { dados }; // Retorna os dados do jogador se tudo estiver OK
}

// Minera√ß√£o
async function minerar(senderId) {
    const check = await verificarPreRequisitosAtividade(senderId, "minerar", "picareta");
    if (check.erro) return { msg: check.erro };
    let dados = check.dados;

    try {
        const agora = Date.now();
        const mineriosPossiveis = [
            { nome: "carvao", chance: 50, nomeExibicao: "Carv√£o" },
            { nome: "ferro", chance: 30, nomeExibicao: "Ferro" },
            { nome: "prata", chance: 20, nomeExibicao: "Prata" },
            { nome: "ouro", chance: 15, nomeExibicao: "Ouro" },
            { nome: "diamante", chance: 5 * (1 / DIFICULDADE.FAILURE_RATE_MODIFIER), nomeExibicao: "Diamante" }, // Mais dif√≠cil encontrar raros
            { nome: "esmeralda", chance: 3 * (1 / DIFICULDADE.FAILURE_RATE_MODIFIER), nomeExibicao: "Esmeralda" }
        ];
        
        const ganhos = [];
        let picaretaQuebrou = false;

        // L√≥gica de minera√ß√£o
        for (const m of mineriosPossiveis) {
            if (Math.random() * 100 < m.chance) {
                const qtd = Math.floor(Math.random() * 3) + 1; // 1 a 3
                ganhos.push({ nome: m.nome, qtd, nomeExibicao: m.nomeExibicao });
                dados = adicionarItem(dados, m.nome, qtd);
            }
        }

        // Chance de quebrar picareta (aumentada pela dificuldade)
        if (Math.random() < (0.25 * DIFICULDADE.FAILURE_RATE_MODIFIER)) {
            const remocao = removerItem(dados, "picareta", 1);
            if (remocao) {
                dados = remocao;
                picaretaQuebrou = true;
            }
        }

        // Define delay (aumentado pela dificuldade)
        dados.delay = dados.delay || {};
        dados.delay.minerar = agora + (3 * 60 * 1000 * DIFICULDADE.ACTION_DELAY_MULTIPLIER);
        dados = modificarFadiga(dados, 10);

        await salvarDadosJogador(senderId, dados);

        let texto = ganhos.length ? ganhos.map(g => `${g.qtd}x *${g.nomeExibicao}*`).join(", ") : "nada de valor";
        let msgFinal = `‚õèÔ∏è Voc√™ balan√ßou sua picareta e encontrou: ${texto}!`;
        if (picaretaQuebrou) {
            msgFinal += "\nüí• *Sua picareta quebrou no processo!* Voc√™ precisar√° de uma nova.";
        }
        if (!ganhos.length && !picaretaQuebrou) {
             msgFinal = "‚õèÔ∏è Voc√™ minerou diligentemente, mas encontrou apenas pedras comuns desta vez.";
        }

        return { msg: msgFinal };

    } catch (err) {
        console.error(`Erro ao minerar para ${senderId}:`, err);
        return { msg: "‚ö†Ô∏è Um desmoronamento repentino o for√ßou a sair da mina!" };
    }
}

// Pesca
async function pescar(senderId) {
    const check = await verificarPreRequisitosAtividade(senderId, "pescar", "isca");
    if (check.erro) return { msg: check.erro };
    let dados = check.dados;

    try {
        const agora = Date.now();
        let peixes = Math.floor(Math.random() * 11) + 5; // 5 a 15
        peixes = Math.floor(peixes * (1 / DIFICULDADE.FAILURE_RATE_MODIFIER)); // Menos peixes com dificuldade

        // Aplica b√¥nus do pet (depend√™ncia futura)
        try {
            const bonus = obterBonusPet(dados, 'pesca'); // Exemplo
            if (bonus) peixes = Math.floor(peixes * bonus);
        } catch(e) {/* Ignora */} 

        // Consome isca e adiciona peixes
        let remocao = removerItem(dados, "isca", 1);
        if (!remocao) return { msg: "‚ö†Ô∏è Algo deu errado ao usar a isca!" }; // Seguran√ßa
        dados = remocao;
        dados = adicionarItem(dados, "peixe", peixes);

        // Define delay
        dados.delay = dados.delay || {};
        dados.delay.pescar = agora + (2 * 60 * 1000 * DIFICULDADE.ACTION_DELAY_MULTIPLIER);
        dados = modificarFadiga(dados, 5);

        await salvarDadosJogador(senderId, dados);

        return { msg: `üé£ Lan√ßou a linha e fisgou ${peixes} peixes! Bom trabalho, pescador!` };

    } catch (err) {
        console.error(`Erro ao pescar para ${senderId}:`, err);
        return { msg: "‚ö†Ô∏è Um monstro marinho faminto roubou sua isca e assustou os peixes!" };
    }
}

// Ca√ßa
async function cacar(senderId) {
    // Verifica arma E muni√ß√£o
    const check = await verificarPreRequisitosAtividade(senderId, "cacar", "arma"); 
    if (check.erro) return { msg: check.erro };
    let dados = check.dados;

    try {
        const agora = Date.now();
        let carnes = Math.floor(Math.random() * 11) + 10; // 10 a 20
        carnes = Math.floor(carnes * (1 / DIFICULDADE.FAILURE_RATE_MODIFIER)); // Menos carne com dificuldade
        let armaQuebrou = false;

        // Aplica b√¥nus do pet (depend√™ncia futura)
        try {
            const bonus = obterBonusPet(dados, 'caca'); // Exemplo
            if (bonus) carnes = Math.floor(carnes * bonus);
        } catch(e) {/* Ignora */} 

        // Consome muni√ß√£o
        let remocaoMunicao = removerItem(dados, "municao", 1);
        if (!remocaoMunicao) return { msg: "‚ö†Ô∏è Falha ao usar a muni√ß√£o!" };
        dados = remocaoMunicao;

        // Chance de quebrar arma
        if (Math.random() < (0.2 * DIFICULDADE.FAILURE_RATE_MODIFIER)) {
            const remocaoArma = removerItem(dados, "arma", 1);
            if (remocaoArma) {
                dados = remocaoArma;
                armaQuebrou = true;
            }
        }

        // Adiciona carne
        dados = adicionarItem(dados, "carne", carnes);

        // Define delay
        dados.delay = dados.delay || {};
        dados.delay.cacar = agora + (4 * 60 * 1000 * DIFICULDADE.ACTION_DELAY_MULTIPLIER);
        dados = modificarFadiga(dados, 12);

        await salvarDadosJogador(senderId, dados);

        let msgFinal = `üèπ Rastreou sua presa e conseguiu ${carnes} carnes suculentas!`;
        if (armaQuebrou) {
            msgFinal = `üèπ Ca√ßou ${carnes} carnes, mas *sua arma n√£o resistiu e quebrou*!`;
        }

        return { msg: msgFinal };

    } catch (err) {
        console.error(`Erro ao ca√ßar para ${senderId}:`, err);
        return { msg: "‚ö†Ô∏è Um urso furioso o expulsou da floresta antes que pudesse ca√ßar!" };
    }
}

// Plantar
async function plantar(senderId) {
    const check = await verificarPreRequisitosAtividade(senderId, "plantar", "semente");
    if (check.erro) return { msg: check.erro };
    let dados = check.dados;

    try {
        const agora = Date.now();
        let colheita = Math.floor(Math.random() * 5) + 3; // 3 a 7
        colheita = Math.floor(colheita * (1 / DIFICULDADE.FAILURE_RATE_MODIFIER)); // Menos colheita

        // Aplica b√¥nus do pet (depend√™ncia futura)
        try {
            const bonus = obterBonusPet(dados, 'plantio'); // Exemplo
            if (bonus) colheita = Math.floor(colheita * bonus);
        } catch(e) {/* Ignora */} 

        // Consome semente e adiciona trigo
        let remocao = removerItem(dados, "semente", 1);
        if (!remocao) return { msg: "‚ö†Ô∏è Falha ao usar a semente!" };
        dados = remocao;
        dados = adicionarItem(dados, "trigo", colheita);

        // Define delay
        dados.delay = dados.delay || {};
        dados.delay.plantar = agora + (5 * 60 * 1000 * DIFICULDADE.ACTION_DELAY_MULTIPLIER);
        dados = modificarFadiga(dados, 8);

        await salvarDadosJogador(senderId, dados);

        return { msg: `üåæ Semeou, cuidou e colheu ${colheita} trigos dourados! O trabalho √°rduo compensa.` };

    } catch (err) {
        console.error(`Erro ao plantar para ${senderId}:`, err);
        return { msg: "‚ö†Ô∏è Uma praga de gafanhotos devorou sua planta√ß√£o antes da colheita!" };
    }
}

// Cortar Madeira
async function cortar(senderId) {
    const check = await verificarPreRequisitosAtividade(senderId, "cortar", "machado");
    if (check.erro) return { msg: check.erro };
    let dados = check.dados;

    try {
        const agora = Date.now();
        let madeira = Math.floor(Math.random() * 7) + 4; // 4 a 10
        madeira = Math.floor(madeira * (1 / DIFICULDADE.FAILURE_RATE_MODIFIER)); // Menos madeira
        let machadoQuebrou = false;

        // Aplica b√¥nus do pet (depend√™ncia futura)
        try {
            const bonus = obterBonusPet(dados, 'corte'); // Exemplo
            if (bonus) madeira = Math.floor(madeira * bonus);
        } catch(e) {/* Ignora */} 

        // Chance de quebrar machado
        if (Math.random() < (0.2 * DIFICULDADE.FAILURE_RATE_MODIFIER)) {
            const remocao = removerItem(dados, "machado", 1);
            if (remocao) {
                dados = remocao;
                machadoQuebrou = true;
            }
        }

        // Adiciona madeira
        dados = adicionarItem(dados, "madeira", madeira);

        // Define delay
        dados.delay = dados.delay || {};
        dados.delay.cortar = agora + (3 * 60 * 1000 * DIFICULDADE.ACTION_DELAY_MULTIPLIER);
        dados = modificarFadiga(dados, 10);

        await salvarDadosJogador(senderId, dados);

        let msgFinal = `ü™ì Derrubou √°rvores e coletou ${madeira} toras de madeira!`;
        if (machadoQuebrou) {
            msgFinal = `ü™ì Cortou ${madeira} madeiras, mas *seu machado cedeu e quebrou*!`;
        }

        return { msg: msgFinal };

    } catch (err) {
        console.error(`Erro ao cortar para ${senderId}:`, err);
        return { msg: "‚ö†Ô∏è Um esp√≠rito ancestral da floresta o expulsou antes que pudesse cortar mais!" };
    }
}

module.exports = {
    minerar,
    pescar,
    cacar,
    plantar,
    cortar
};

