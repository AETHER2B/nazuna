name: Nazuna Bot

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 325
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Remove database folder from repository only
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        if git ls-files --error-unmatch dados/database/ > /dev/null 2>&1; then
          git rm -r --cached dados/database/
          git commit -m "Remove database folder from repository to keep it private [skip ci]"
          git push origin main
        else
          echo "A pasta 'dados/database' não está no índice do Git ou já foi removida. Nenhuma ação necessária."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install FFmpeg
      run: sudo apt-get update && sudo apt-get install -y ffmpeg

    - name: Install dependencies
      run: npm install

    - name: Run config install
      run: npm run config:install

    - name: Create config.json if it does not exist
      run: |
        CONFIG_FILE="dados/src/config.json"
        if [ ! -f \"$CONFIG_FILE\" ]; then
          mkdir -p $(dirname \"$CONFIG_FILE\")
          cat <<'EOT' > \"$CONFIG_FILE\"
          {
          "nomedono": "Hiudy",
          "numerodono": "553399285117",
          "nomebot": "Nazuna",
          "prefixo": "!",
          "aviso": false,
          "debug": false,
          "enablePanel": false
          }
EOT
          echo \"$CONFIG_FILE criado com sucesso.\"
        else
          echo \"$CONFIG_FILE já existe, pulando a criação.\"
        fi

    - name: Run connect.js with restart on crash
      run: |
        REPO_FULL_NAME="${{ github.repository }}"
        REPO_OWNER="${{ github.repository_owner }}"
        UNIQUE_CODE=$(echo -n "$REPO_FULL_NAME$REPO_OWNER" | sha256sum | head -c 16)
        START_TIME=$(date +%s)
        MAX_ATTEMPTS=5
        ATTEMPT=1
        MAX_RUNTIME=$((5 * 60 * 60))

        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))

          if [ $ELAPSED -ge $MAX_RUNTIME ]; then
            echo "Tempo máximo de execução atingido ($((MAX_RUNTIME / 3600)) horas), saindo para executar passos finais."
            break
          fi

          echo "Tentativa $ATTEMPT de rodar connect.js..."
          node dados/src/connect.js --web=$UNIQUE_CODE
          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            echo "connect.js executado com sucesso."
            break
          else
            echo "connect.js falhou com código de saída $EXIT_CODE."
            ATTEMPT=$((ATTEMPT + 1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "Tentando novamente em 5 segundos..."
              sleep 5
            else
              echo "connect.js falhou após $MAX_ATTEMPTS tentativas. Encerrando."
              exit 1
            fi
          fi
        done

    - name: Commit and push changes to repository
      if: always()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add dados
        if ! git diff-index --quiet HEAD; then
          git commit -m "Update config and midias files [skip ci]"
          git push origin main
        else
          echo "Nenhuma alteração para comitar."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Trigger next workflow
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_FULL_NAME: ${{ github.repository }}
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/$REPO_FULL_NAME/actions/workflows/ci.yml/dispatches \
          -d '{"ref":"main","inputs":{}}'