name: Nazuna Bot

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 325
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessário para trabalhar com o histórico do repositório

    - name: Remove database folder from repository only
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        # Cria uma cópia temporária da pasta database para preservar localmente
        cp -r dados/database dados/database_temp || echo "No database folder to copy"
        # Remove a pasta database do índice do Git
        git rm -r --cached dados/database/ || echo "No database folder to remove"
        git commit -m "Remove database folder from repository to keep it private [skip ci]" || echo "No changes to commit"
        git push origin main
        # Restaura a pasta database localmente
        mv dados/database_temp dados/database || echo "No database_temp to restore"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install FFmpeg
      run: sudo apt-get update && sudo apt-get install -y ffmpeg

    - name: Install dependencies
      run: npm install

    - name: Run config install
      run: npm run config:install

    - name: Create config.json if it does not exist
      run: |
        if [ ! -f dados/src/config.json ]; then
          cat <<EOT > dados/src/config.json
          {
            "nomedono": "Hiudy",
            "numerodono": "553399285117",
            "nomebot": "Nazuna",
            "prefixo": "!",
            "aviso": false,
            "debug": false,
            "enablePanel": false
          }
          EOT
          echo "config.json created"
        else
          echo "config.json already exists, skipping creation"
        fi

    - name: Run connect.js with restart on crash
      run: |
        REPO_FULL_NAME="${{ github.repository }}"
        REPO_OWNER="${{ github.repository_owner }}"
        UNIQUE_CODE=$(echo -n "$REPO_FULL_NAME$REPO_OWNER" | sha256sum | head -c 16)
        START_TIME=$(date +%s)
        MAX_ATTEMPTS=5
        ATTEMPT=1
        MAX_RUNTIME=$((5 * 60 * 60))
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          if [ $ELAPSED -ge $MAX_RUNTIME ]; then
            echo "Tempo máximo de execução atingido (5 horas), saindo para executar passos finais"
            break
          fi
          echo "Tentativa $ATTEMPT de rodar connect.js"
          node dados/src/connect.js --web=$UNIQUE_CODE && break
          ATTEMPT=$((ATTEMPT + 1))
          if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
            echo "connect.js falhou, tentando novamente em 10 segundos..."
            sleep 10
          else
            echo "connect.js falhou após $MAX_ATTEMPTS tentativas, saindo para passos finais"
            break
          fi
        done

    - name: Commit and push changes to repository
      if: always()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add dados/database/* dados/src/config.json dados/midias/*
        git commit -m "Update config, database, and midias files [skip ci]" || echo "No changes to commit"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Trigger next workflow
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO_FULL_NAME: ${{ github.repository }}
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/$REPO_FULL_NAME/actions/workflows/ci.yml/dispatches \
          -d '{"ref":"main","inputs":{}}'